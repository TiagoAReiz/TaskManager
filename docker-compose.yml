version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres-db:
    image: postgres:15-alpine
    container_name: taskmaster-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskmaster
      POSTGRES_USER: taskmaster_user
      POSTGRES_PASSWORD: taskmaster_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Script de inicialização (opcional)
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - taskmaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskmaster_user -d taskmaster"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./taskManager
      dockerfile: Dockerfile
    container_name: taskmaster-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Configurações do banco de dados
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/taskmaster
      SPRING_DATASOURCE_USERNAME: taskmaster_user
      SPRING_DATASOURCE_PASSWORD: taskmaster_pass
      
      # Configurações do JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      
      # Configurações do servidor
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
      
      # Configurações de segurança (altere em produção)
      JWT_SECRET: mySecretKey123456789012345678901234567890
      JWT_EXPIRATION: 86400000
      
      # Configurações de log
      LOGGING_LEVEL_COM_TIAGOREIZ: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
      
      # Configurações do Actuator
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - taskmaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Volume para logs da aplicação
      - backend_logs:/app/logs

  # Frontend Angular com Nginx
  frontend:
    image: nginx:stable-alpine
    container_name: taskmaster-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Monta o build do Angular
      - ./frontend/dist/frontend:/usr/share/nginx/html:ro
      # Monta a configuração customizada do Nginx
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      # Volume para logs do Nginx
      - frontend_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - taskmaster-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer para gerenciamento do banco (opcional - apenas para desenvolvimento)
  adminer:
    image: adminer:latest
    container_name: taskmaster-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres-db
    depends_on:
      - postgres-db
    networks:
      - taskmaster-network
    profiles:
      - dev # Só será executado quando usar o profile 'dev'

# Volumes nomeados para persistência de dados
volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local

# Rede customizada para comunicação entre containers
networks:
  taskmaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
